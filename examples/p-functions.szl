// This is an example of creating your own functions. //
#program "The_Funcfather"

// Just like you can create your own variable types with objects, you can make your own functions! //
// First, you declare what is the 'result' of the function. Can be any variable type, or void (nothing). //
// Then, you specify the name. //
// And lastly, arguments (parameters) which the function receives from the caller. //
int addition(int num1, int num2)
{
    int res = num1 + num2; // We use parameters to do something. //
    return res;            // Using resturn keyword we inform the program that the function has concluded and has some results for the caller. //
    // Here the execution of te function ends, and the program goes back to the place where the function was called from (to the caller). //
}

int subtraction(int num1, int num2)
{
    num1 = num1 - num2; // Notice how we can modify the parameter. What we get from the caller is only a copy, that we can do anything we wish with! //
    return num1;
}

void writeToMyDevice(int content)
{
    out(13, content);
    // Notice how void functions do not need return keyword. //
}

void writeToMyOtherDevice(int content)
{
    out(14, content);
    return 0; // But you can still use it - just remember that the value you give it will still not be accessible to the caller. //
}

object Car
{
    uint mass;
    ulong mileage;
    float fuel;
}

Car modifyCar(Car c) // We can use objects too! //
{
    c.mass = c.mass + 100;
    return c;
}

void skipCopy(uint pointer)
{
    53->pointer;
    // Here we modified memory directly, which means that when we use pointers, we do not have copies - only the original variables! //
}

uint createCar()
{
    Car warszawa;
    warszawa.mass = 1360;
    warszawa.mileage = 64533;
    warszawa.fuel = 4.231;
    uint car = alloc(sizeof(Car)); // Here we allocate a new car in memory... //
    warszawa->car;                 // ... which we then make a copy of. //
    return car;                    // Now, since pointers are not deleted when function concludes, we can return car without worrying that it will be deleted. //
    // return ?@warszawa; <- WRONG! This creates pointer to a normal variable. After return, warszawa will be deleted, and the pointer will no longer be valid! //
}

void main()
{
    int res = addition(6, 4);
    int a = 2;
    int b = 1;
    res = subtraction(a, b);
    // Variable 'a' (which was num1) is still equal to 2, despite num1 being modified - it was just a copy! //

    writeToMyOtherDevice(res);
    writeToMyDevice(res);

    Car syrena;
    syrena.mass = 970;
    syrena.mileage = 32777;
    syrena.fuel = 4.535;
    Car betterSyrena;
    betterSyrena = modifyCar(syrena);

    skipCopy(?@a);
    // Variable 'a' was overwritten, because we passed pointer instead of copy! //

    uint warszawa = createCar(); // Here we have a function that returns a pointer to object in memory. //
    free(warszawa, sizeof(Car)); // We must remember to delete it after it is no longer needed. //
}

// Here this example ends. //
